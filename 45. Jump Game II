#低效率dp
class Solution:
    def jump(self, nums: List[int]) -> int:
        if len(nums) <=2:
            return len(nums)-1
        dp = [0 for i in range(len(nums))]
        nums = nums[::-1]

        for i in range(1,len(nums)):

            if nums[i] ==0:
                dp[i] = 10**7
                continue
            if nums[i] >= i :
                dp[i] = 1
                continue
            dp[i] = min(dp[i-nums[i]:i])+1
        return dp[-1]
        
#贪心
class Solution:
    def jump(self, nums: List[int]) -> int:
        max_pos,end,step = 0,0,0

        for i in range(len(nums)-1):
            if max_pos>=i:
                max_pos = max(max_pos,nums[i] + i)
            if i ==end:
                end = max_pos
                step +=1

        return step
        
