# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def detectCycle(self, head: ListNode) -> ListNode:
        res_temp = set()
        temp = head
        while temp:
            if temp in res_temp:
                return temp
            else:
                res_temp.add(temp)
                temp = temp.next
        return
        
        
#fast slow point

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def detectCycle(self, head: ListNode) -> ListNode:
        res,fast,slow = head,head,head
        is_meet = False
        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next
            if is_meet:
                res = res.next
            if fast == slow:
                is_meet = True
            if is_meet and res == slow:
                return res
        
        return 
