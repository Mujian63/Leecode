#递归算法
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def inorderTraversal(self, root: TreeNode) -> List[int]:
        res = []
        def mid_find(root):
            if not root :
                return
            
            mid_find(root.left)
            res.append(root.val)
            mid_find(root.right)
        
        mid_find(root)
        return res
        
#迭代解法
#栈存储
class Solution:
    def inorderTraversal(self, root: TreeNode) -> List[int]:
        stack,res = [],[]
        while root or len(stack)!=0:
            if root:
                stack.append(root)
                root = root.left
            else:
                root = stack.pop()
                res.append(root.val)
                root = root.right
        return res
#Morris 中序遍历


# 颜色标记法 ：
class Solution:
    def inorderTraversal(self, root: TreeNode) -> List[int]:
        stack,res = [root],[]
        while stack:
            temp = stack.pop()
            if isinstance(temp,TreeNode):
                stack.extend([temp.right,temp.val,temp.left])
            elif isinstance(temp,int):
                res.append(temp)
        return res
