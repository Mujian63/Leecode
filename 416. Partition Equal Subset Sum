class Solution:
    def canPartition(self, nums: List[int]) -> bool:
        n = len(nums)
        nums.sort(reverse = True)
        target = sum(nums)//2
        if len(nums)<2 or sum(nums)%2 or nums[0]>target:
            return False
        
        memo = dict()
        def dfs(index,target):
            
            if (index,target) in memo:
                return memo[(index,target)]
            if target == 0:
                return True
            elif target<0 or index == n:
                return False
            
            memo[(index,target)] = dfs(index+1,target - nums[index]) or dfs(index+1,target)
            return memo[(index,target)]
        
        return dfs(0,target)
