# 数学解法  参考Venn图

class Solution:
    def trap(self, height: List[int]) -> int:
        if len(height) == 0:
            return 0
        for i in range(len(height)):
            res_left,res_right = 0,0

            max_height = 0
            for i in height:
                if i>max_height:
                    max_height = i
                
                res_left += (max_height - i)
            

            max_height = 0
            for i in height[::-1]:
                if i>max_height:
                    max_height = i
                res_right += (max_height-i)
            
            res_sum = 0
            for i in height:
                res_sum += max_height-i

            return res_right + res_left - res_sum
            
#dp解法

class Solution:
    def trap(self, height: List[int]) -> int:
        if len(height) == 0:
            return 0

        max_left = [height[0] for i in range(len(height))]
        max_right = [height[-1] for i in range(len(height))]

        for i in range(1,len(height)):
            max_left[i] = max(height[i],max_left[i-1])
        
        for i in range(len(height) -2,-1,-1):
            max_right[i] = max(height[i],max_right[i+1])
        
        res = 0

        for i in range(len(height)):
            res += min(max_left[i],max_right[i]) - height[i]
        return res
